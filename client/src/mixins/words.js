export const words = [
  '一个好的程序员是那种过单行线马路都要往两边看的人',
  '程序有问题时不要担心。如果所有东西都没问题，你就失业了',
  '程序员的麻烦在于，你无法弄清他在捣腾什么，当你最终弄明白时，也许已经晚了',
  '我想大部分人都知道通常一个程序员会具有的美德。当然了，有三种：懒惰，暴躁，傲慢',
  '编程时要保持这种心态：就好像将来要维护你这些代码的人是一位残暴的精神病患者，而且他知道你住在哪',
  '一个人写的烂软件将会给另一个人带来一份全职工作',
  '如果建筑工人像程序员写软件那样盖房子，那第一只飞来的啄木鸟就能毁掉人类文明',
  '我们这个行业有个特别奇怪的现象：不仅我们不从失败里吸取教训，同时也不从成功中学习经验',
  '一种新技术一旦开始流行，你要么坐上压路机，要么成为铺路石',
  '如果没能一次成功，那就叫它1.0版吧',
  '所有的程序员都是编剧，所有的计算机都是烂演员',
  '工作进度上越早落后，你就会有越充足的时间赶上',
  '当有这样的一种编程语言出现：它能让程序员用简单的英语编程，你将会发现，程序员都开始不会说英语',
  '为什么我们没有时间把事情做对，却总有时间把事情做过头？',
  '傻瓜都能写出计算机能理解的程序。优秀的程序员写出的是人类能读懂的代码。',
  '任何你写的代码，超过6个月不去看它，当你再看时，都像是别人写的',
  '按代码行数来评估软件开发的进度，就如同按重量来评估飞机建造的进度',
  // '软件就像做爱。一次犯错，你需要用余下一生来维护支持',
  '在水上行走和按需求文档开发软件都很容易——前提是它们都是冻结状态',
  '最初90%的代码用去了最初90%的开发时间…余下10%的代码用去了另外90%的开发时间',
  '注释代码很像清洁你的厕所——你不想干，但如果你做了，这绝对会给你和你的客人带来更愉悦的体验',
  '软件设计最困难的部分…是阻挡新功能的引入',
  '为了理解递归，我们首先要理解的是递归',
  '世上只有两类编程语言：那些拥有被人诟病的和那些没人用的',
  '如果Java能实现真的垃圾回收，那大部分的程序都会在执行时删除自己',
  '理论上，理论和实践是没有差异的。但实践中，是有的',
  '预备，开火，瞄准：这是最快的软件开发方法。预备，瞄准，瞄准，瞄准，瞄准：这是最慢的软件开发方法',
  '编程是10%的科学，20%天份，和70%的让这天份符合科学',
  '评估一个事情要比去理解你评估了什么容易',
  '测评不会撒谎，但测评的人会',
  '培养员工，即使他们有跳槽的风险。什么都不做而留他们在公司，这样风险更大',
  '计算机科学的目标是做出一个东西，并且保证它至少能坚持到我们将它开发完成',
  '起初就把事情做对是完全没必要的。但最后要把事情做对是绝对必要的',
  '数组的起始索引应该从0开始还是从1开始？我的0.5的折中提议被他们未经认真考虑到拒绝了——我认为是这样的',
  '程序必须是为了给人看而写，给机器去执行只是附带任务',
  '编程可以很有趣，你可以用它做密码学研究，但两者绝对不能合二为一',
  '拷贝-粘贴是一种设计错误',
  '计算机善于遵循指令，但不善于理解你的思维',
  '删除的代码是没有bug的代码',
  '如果纠错是消除软件bug的过程，那编程一定是把它们放进去的过程',
  '代码纠错要比新编写代码困难一倍。因为，如果你写出了最聪明的代码，按此推算，你将没有更大的智慧来debug它。',
  '想在自己的代码里找出一个错误是十分困难的。而当你认为你的代码没有错误时，那就更难了',
  '这不是个bug——这一个未注明的功能特征',
  '没有需求或设计，编程就是一种将bug添加到一个空文本文件里的艺术',
  '烂代码并不烂，只是被误解了',
  '有两种方法能写出没有错误的程序；但只有第三种好用',
  '小心上面代码中的bug；我只知道这些代码是正确的，但没有试过',
  '软件能够复用前，它必须要可用',
  '软件通常在beta测试完成不久后发布。Beta在拉丁语中是“还不能用”的意思',
  '最好的性能改进是将软件从不能用的状态变成可用',
  '最廉价、最快速、最可信赖的组件是那些还未出现的组件',
  '软件和教堂非常相似——建成之后我们就在祈祷',
  '除非最后一个用户死掉，软件是不会有完工的时候的'
]
